.\" Automatically generated by Pandoc 2.5
.\"
.TH "RPMEM_PERSIST" "3" "2019-11-29" "PMDK - rpmem API version 1.3" "PMDK Programmer's Manual"
.hy
.\" Copyright 2017-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]rpmem_persist\f[R](), \f[B]rpmem_deep_persist\f[R](),
\f[B]rpmem_flush\f[R](), \f[B]rpmem_drain\f[R](), \f[B]rpmem_read\f[R]()
\- functions to copy and read remote pools
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <librpmem.h>

int rpmem_persist(RPMEMpool *rpp, size_t offset,
    size_t length, unsigned lane, unsigned flags);
int rpmem_deep_persist(RPMEMpool *rpp, size_t offset,
    size_t length, unsigned lane);

int rpmem_flush(RPMEMpool *rpp, size_t offset,
    size_t length, unsigned lane, unsigned flags);
int rpmem_drain(RPMEMpool *rpp, unsigned lane, unsigned flags);

int rpmem_read(RPMEMpool *rpp, void *buff, size_t offset,
    size_t length, unsigned lane);
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[B]rpmem_persist\f[R]() function copies data of given
\f[I]length\f[R] at given \f[I]offset\f[R] from the associated local
memory pool and makes sure the data is persistent on the remote node
before the function returns.
The remote node is identified by the \f[I]rpp\f[R] handle which must be
returned from either \f[B]rpmem_open\f[R](3) or
\f[B]rpmem_create\f[R](3).
The \f[I]offset\f[R] is relative to the \f[I]pool_addr\f[R] specified in
the \f[B]rpmem_open\f[R](3) or \f[B]rpmem_create\f[R](3) call.
If the remote pool was created using \f[B]rpmem_create\f[R]() with
non\-NULL \f[I]create_attr\f[R] argument, \f[I]offset\f[R] has to be
greater or equal to 4096.
In that case the first 4096 bytes of the pool is used for storing the
pool metadata and cannot be overwritten.
If the pool was created with NULL \f[I]create_attr\f[R] argument, the
pool metadata is not stored with the pool and \f[I]offset\f[R] can be
any nonnegative number.
The \f[I]offset\f[R] and \f[I]length\f[R] combined must not exceed the
\f[I]pool_size\f[R] passed to \f[B]rpmem_open\f[R](3) or
\f[B]rpmem_create\f[R](3).
The \f[B]rpmem_persist\f[R]() operation is performed using the given
\f[I]lane\f[R] number.
The lane must be less than the value returned by \f[B]rpmem_open\f[R](3)
or \f[B]rpmem_create\f[R](3) through the \f[I]nlanes\f[R] argument (so
it can take a value from 0 to \f[I]nlanes\f[R] \- 1).
The \f[I]flags\f[R] argument can be 0 or RPMEM_PERSIST_RELAXED which
means the persist operation will be done without any guarantees
regarding atomicity of memory transfer.
.PP
The \f[B]rpmem_deep_persist\f[R]() function works in the same way as
\f[B]rpmem_persist\f[R](3) function, but additionally it flushes the
data to the lowest possible persistency domain available from software.
Please see \f[B]pmem_deep_persist\f[R](3) for details.
.PP
The \f[B]rpmem_flush\f[R]() and \f[B]rpmem_drain\f[R]() functions are
two halves of the single \f[B]rpmem_persist\f[R]().
The \f[B]rpmem_persist\f[R]() copies data and makes it persistent in the
one shot, where \f[B]rpmem_flush\f[R]() and \f[B]rpmem_drain\f[R]()
split this operation into two stages.
The \f[B]rpmem_flush\f[R]() copies data of given \f[I]length\f[R] at a
given \f[I]offset\f[R] from the associated local memory pool to the
remote node.
The \f[B]rpmem_drain\f[R]() makes sure the data copied in all preceding
\f[B]rpmem_flush\f[R]() calls is persistent on the remote node before
the function returns.
Data copied using \f[B]rpmem_flush\f[R]() can not be considered
persistent on the remote node before return from following
\f[B]rpmem_drain\f[R]().
Single \f[B]rpmem_drain\f[R]() confirms persistence on the remote node
of data copied by all \f[B]rpmem_flush\f[R]() functions called before it
and using the same \f[I]lane\f[R].
The last \f[B]rpmem_flush\f[R]() + \f[B]rpmem_drain\f[R]() can be
replaced with \f[B]rpmem_persist\f[R]() at no cost.
.PP
The \f[I]flags\f[R] argument for \f[B]rpmem_flush\f[R]() can be 0 or
RPMEM_FLUSH_RELAXED which means the flush operation will be done without
any guarantees regarding atomicity of memory transfer.
The \f[I]flags\f[R] argument for \f[B]rpmem_drain\f[R]() must be 0.
.PP
The \f[B]rpmem_flush\f[R]() function performance is affected by
\f[B]RPMEM_WORK_QUEUE_SIZE\f[R] environment variable (see
\f[B]librpmem\f[R](7) for more details).
.PP
The \f[B]rpmem_read\f[R]() function reads \f[I]length\f[R] bytes of data
from a remote pool at \f[I]offset\f[R] and copies it to the buffer
\f[I]buff\f[R].
The operation is performed on the specified \f[I]lane\f[R].
The lane must be less than the value returned by \f[B]rpmem_open\f[R](3)
or \f[B]rpmem_create\f[R](3) through the \f[I]nlanes\f[R] argument (so
it can take a value from 0 to \f[I]nlanes\f[R] \- 1).
The \f[I]rpp\f[R] must point to a remote pool opened or created
previously by \f[B]rpmem_open\f[R](3) or \f[B]rpmem_create\f[R](3).
.SH RETURN VALUE
.PP
The \f[B]rpmem_persist\f[R]() function returns 0 if the entire memory
area was made persistent on the remote node.
Otherwise it returns a non\-zero value and sets \f[I]errno\f[R]
appropriately.
.PP
The \f[B]rpmem_flush\f[R]() function returns 0 if duplication of the
memory area to the remote node was initialized successfully.
Otherwise, it returns a non\-zero value and sets \f[I]errno\f[R]
appropriately.
.PP
The \f[B]rpmem_drain\f[R]() function returns 0 if the memory areas
duplicated by all \f[B]rpmem_flush\f[R]() calls preceding the
\f[B]rpmem_drain\f[R]() are made persistent on the remote node.
Otherwise, it returns a non\-zero value and sets \f[I]errno\f[R]
appropriately.
.PP
The \f[B]rpmem_read\f[R]() function returns 0 if the data was read
entirely.
Otherwise it returns a non\-zero value and sets \f[I]errno\f[R]
appropriately.
.SH CAVEATS
.PP
Ordering of \f[B]rpmem_flush\f[R]() and \f[B]rpmem_persist\f[R]()
operations which are using different \f[I]lane\f[R] values is not
guaranteed.
.SH SEE ALSO
.PP
\f[B]rpmem_create\f[R](3), \f[B]rpmem_open\f[R](3),
\f[B]rpmem_persist\f[R](3), \f[B]sysconf\f[R](3),
\f[B]limits.conf\f[R](5), \f[B]libpmemobj\f[R](7) and
\f[B]<http://pmem.io>\f[R]
