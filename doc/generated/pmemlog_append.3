.\" Automatically generated by Pandoc 2.5
.\"
.TH "PMEMLOG_APPEND" "3" "2019-11-29" "PMDK - pmemlog API version 1.1" "PMDK Programmer's Manual"
.hy
.\" Copyright 2017-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmemlog_append\f[R](), \f[B]pmemlog_appendv\f[R]() \- append bytes
to the persistent memory resident log file
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <libpmemlog.h>

int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count);
int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt);
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemlog_append\f[R]() function appends \f[I]count\f[R] bytes
from \f[I]buf\f[R] to the current write offset in the log memory pool
\f[I]plp\f[R].
Calling this function is analogous to appending to a file.
The append is atomic and cannot be torn by a program failure or system
crash.
.PP
The \f[B]pmemlog_appendv\f[R]() function appends to the log memory pool
\f[I]plp\f[R] from the scatter/gather list \f[I]iov\f[R] in a manner
similar to \f[B]writev\f[R](2).
The entire list of buffers is appended atomically, as if the buffers in
\f[I]iov\f[R] were concatenated in order.
The append is atomic and cannot be torn by a program failure or system
crash.
.SH RETURN VALUE
.PP
On success, \f[B]pmemlog_append\f[R]() and \f[B]pmemlog_appendv\f[R]()
return 0.
On error, they return \-1 and set \f[I]errno\f[R] appropriately.
.SH ERRORS
.PP
\f[B]EINVAL\f[R] The vector count \f[I]iovcnt\f[R] is less than zero.
.PP
\f[B]ENOSPC\f[R] There is no room for the data in the log file.
.PP
\f[B]EROFS\f[R] The log file is open in read\-only mode.
.SH NOTES
.PP
Since \f[B]libpmemlog\f[R](7) is designed as a low\-latency code path,
many of the checks routinely done by the operating system for
\f[B]writev\f[R](2) are not practical in the library\[cq]s
implementation of \f[B]pmemlog_appendv\f[R]().
No attempt is made to detect NULL or incorrect pointers, for example.
.SH SEE ALSO
.PP
\f[B]writev\f[R](2), \f[B]libpmemlog\f[R](7) and
\f[B]<http://pmem.io>\f[R]
